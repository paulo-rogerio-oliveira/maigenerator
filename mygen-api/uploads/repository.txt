using Globaltec.UAU.Dal.Contracts.Services;
using Globaltec.UAU.Dal.Core.SqlServer.Contracts;
using Globaltec.UAU.Dal.Entity.Models;
using Globaltec.UAU.Dal.Interfaces.Entity;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using Dapper;

namespace Globaltec.UAU.Dal.Integracoes.Services.SqlServer
{
    [Dapper.Attributes.SqlServerName()]
    public class PessoaService : UauSqlServiceBase, IPessoaService
    {
        private string QueryBase =
            @"select
                Cod_pes,
                Nome_pes,
                Tipo_pes,
                Cpf_pes,
                Dtcad_pes,
                Dtnasc_pes,
                IntExt_pes,
                UsrCad_pes,
                UsrAlt_pes,
                Status_pes,
                Tratamento_pes,
                Email_pes,
                EndWWW_pes,
                Matricula_Pes,
                AtInat_pes,
                DataAlt_pes,
                NomeFant_Pes,
                Anexos_pes,
                InscrMunic_pes,
                Inscrest_pes,
                Login_pes,
                Senha_pes,
                CNAE_pes,
                DataCadPortal_pes,
                CadastradoPrefeituraGyn_pes,
                HabilitadoRiscoSacado_pes,
                CEI_Pes,
                IntegradoEDI_pes,
                BloqueioLgpd_Pes
            From Pessoas
            Where 
                1=1";

        public PessoaService(IDbTransaction transaction) : base(transaction)
        {
        }

        public bool Inative(int value)
        {
            DynamicParameters ActualParams = new DynamicParameters();

            return UAUConnection.Execute(
                    "Update Pessoas set AtInat_pes = 1 where 1=1".AddCodPesParam(value, ActualParams),
                    param: ActualParams,
                    transaction: UAUTransaction) > 0;
        }

        public IEnumerable<IPessoas> Listar()
        {
            return UAUConnection.Query<Pessoas>(QueryBase, transaction: UAUTransaction);
        }

        public IPessoas ObtenhaPorCodigo(int codfornecedor)
        {
            DynamicParameters ActualParams = new DynamicParameters();

            return UAUConnection.Query<Pessoas>(
                    QueryBase.AddCodPesParam(codfornecedor, ActualParams),
                    param: ActualParams,
                    transaction: UAUTransaction).SingleOrDefault();
        }

        public IEnumerable<IPessoas> ObtenhaPorCpfIn(IEnumerable<string> listaCpfs)
        {
            DynamicParameters ActualParams = new DynamicParameters();

            return UAUConnection.Query<Pessoas>(
                    QueryBase.AddInCpfsParam(listaCpfs, ActualParams),
                    param: ActualParams,
                    transaction: UAUTransaction);
        }
    }

    internal static class ExtensionsQueryPessoa
    {
        internal static string AddCodPesParam(this string query, int codPes, DynamicParameters actualParams)
        {
            actualParams.Add("codfornecedor", codPes);
            return query + " AND Cod_pes = @codfornecedor";
        }

        internal static string AddInCpfsParam(this string query, IEnumerable<string> listaCpfs, DynamicParameters actualParams)
        {
            actualParams.Add("listaCpfs", listaCpfs);
            return query + " AND Cpf_pes IN @listaCpfs";
        }
    }
}
